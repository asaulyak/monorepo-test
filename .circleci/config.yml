version: 2.1

var_1: &cache_key v1-monorepo-{{ checksum "package-lock.json" }}
var_2: &workspace_location .
var_3: &node_version 16.8.0

executors:
  action-executor:
    parameters:
      nodeversion:
        type: string
        default: *node_version
    docker:
      - image: cimg/node:<< parameters.nodeversion >>

  aws-executor:
    docker:
      - image: cimg/python:3.6

  lint-executor:
    resource_class: small
    parameters:
      nodeversion:
        type: string
        default: *node_version
    docker:
      - image: cimg/node:<< parameters.nodeversion >>

  test-executor:
    parameters:
      nodeversion:
        type: string
        default: *node_version
    environment:
      PGPORT: 5432
      PGHOST: localhost
      PGUSER: postgres
      PGDB: circle_test
      NODE_ENV: ci
    docker:
      - image: cimg/node:<< parameters.nodeversion >>
      - image: circleci/postgres:9.6-alpine

orbs:
  aws-s3: circleci/aws-s3@3.0
  aws-eb: circleci/aws-elastic-beanstalk@2.0.1

commands:
  fail_fast:
    steps:
      - run:
          name: 'Cancel workflow on fail'
          when: on_fail
          command: curl -X POST "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_API_TOKEN"

  attach_workspace_default:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: *workspace_location
  test_workspace:
    parameters:
      workspace_name:
        type: string
    steps:
      - attach_workspace_default
      - run:
          name: 'Prepare DB_URL env variable'
          command: |
            echo 'export DB_URL="postgresql://$PGUSER@$PGHOST/$PGDB"' >> $BASH_ENV
      - run:
          name: 'Wait for Postgres connection to open'
          command: dockerize -wait tcp://$PGHOST:$PGPORT -timeout 1m
      - run:
          name: 'Run DB migrations'
          command: npm run up -w apps/dev-migrations
      - run: npm run test -w << parameters.workspace_name >>
      - fail_fast

jobs:
  setup:
    executor: action-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - *cache_key
      - run: npm i
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ./*
      - save_cache:
          key: *cache_key
          paths:
            - node_modules
            - ./apps/**/node_modules
            - ./packages/**/node_modules

  build:
    executor: action-executor
    steps:
      - attach_workspace_default
      - run: npm run build
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ./*
      - fail_fast

  test_all:
    executor: test-executor
    steps:
      - test_workspace:
          matrix:
            parameters:
              workspace_name: ['apps/dev-ui', 'apps/dashboard-ui', 'packages/uuid', 'packages/date', 'packages/orm']

  #  test_dev_ui:
  #    executor: test-executor
  #    steps:
  #      - test_workspace:
  #          workspace_name: 'apps/dev-ui'
  #
  #  test_dashboard_ui:
  #    executor: test-executor
  #    steps:
  #      - test_workspace:
  #          workspace_name: 'apps/dashboard-ui'
  #
  #  test_packages_uuid:
  #    executor: test-executor
  #    steps:
  #      - test_workspace:
  #          workspace_name: 'packages/uuid'
  #
  #  test_packages_date:
  #    executor: test-executor
  #    steps:
  #      - test_workspace:
  #          workspace_name: 'packages/date'
  #
  #  test_packages_orm:
  #    executor: test-executor
  #    steps:
  #      - test_workspace:
  #          workspace_name: 'packages/orm'

  lint:
    executor: lint-executor
    steps:
      - attach_workspace_default
      - run: npm run lint
      - fail_fast

  release_server:
    executor: action-executor
    steps:
      - attach_workspace_default
      - run:
          name: 'Update package.json, package-lock.json'
          command: bash .circleci/test-before.sh
      - run:
          name: 'Create release folder'
          command: bash .circleci/build-server.sh
      - store_artifacts:
          path: release
          destination: release
      - persist_to_workspace:
          root: .
          paths:
            - release
      - fail_fast

  deploy_server:
    executor: aws-executor
    working_directory: ./release
    steps:
      - attach_workspace_default
      - aws-s3/copy:
          arguments: '--dryrun'
          from: release/dev-ui.zip
          to: 's3://my-s3-bucket-stage'

  deploy_server_prod:
    executor: aws-executor
    steps:
      - attach_workspace_default
      - aws-s3/copy:
          arguments: '--dryrun'
          from: release/dev-ui.zip
          to: 's3://my-s3-bucket-prod'

workflows:
  version: 2
  default_workflow:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      - build:
          requires:
            - setup
      - test_all:
          requires:
            - build

      #      - test_dev_ui:
      #          requires:
      #            - build
      #      - test_dashboard_ui:
      #          requires:
      #            - build
      #      - test_packages_uuid:
      #          requires:
      #            - build
      #      - test_packages_date:
      #          requires:
      #            - build
      #      - test_packages_orm:
      #          requires:
      #            - build
      - release_server:
          filters:
            branches:
              only:
                - master
                - production
          requires:
            - lint
            - build
            - test_all
      #            - test_dev_ui
      #            - test_dashboard_ui
      #            - test_packages_date
      #            - test_packages_uuid
      #            - test_packages_orm
      - deploy_server:
          filters:
            branches:
              only:
                - master
          requires:
            - release_server
      - hold:
          type: approval
          filters:
            branches:
              only:
                - production
          requires:
            - release_server
      - deploy_server_prod:
          filters:
            branches:
              only:
                - production
          requires:
            - hold
