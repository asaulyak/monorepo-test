version: 2.1

var_1: &cache_key v1-monorepo-{{ checksum "package-lock.json" }}
var_2: &workspace_location .
var_3: &node_version 16.8.0

executors:
  node-executor:
    parameters:
      nodeversion:
        type: string
        default: *node_version
    docker:
      - image: cimg/node:<< parameters.nodeversion >>

  python-executor:
    docker:
      - image: cimg/python:3.6

  test-executor:
    parameters:
      nodeversion:
        type: string
        default: *node_version
    environment:
      PGPORT: 5432
      PGHOST: localhost
      PGUSER: postgres
      PGDB: circle_test
      NODE_ENV: ci
    docker:
      - image: cimg/node:<< parameters.nodeversion >>
      - image: circleci/postgres:9.6-alpine

orbs:
  aws-s3: circleci/aws-s3@3.0
  aws-eb: circleci/aws-elastic-beanstalk@2.0.1

commands:
  fail_fast:
    steps:
      - run:
          name: 'Cancel workflow on fail'
          when: on_fail
          command: curl -X POST "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_API_TOKEN"

  attach_workspace_default:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: *workspace_location

jobs:
  setup:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - *cache_key
      - run: npm i
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ./*
      - save_cache:
          key: *cache_key
          paths:
            - node_modules
            - ./apps/**/node_modules
            - ./packages/**/node_modules

  build:
    executor: node-executor
    steps:
      - attach_workspace_default
      - run: npm run build
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ./*
      - fail_fast

  test:
    executor: test-executor
    parallelism: 2
    steps:
      - attach_workspace_default
      - run:
          name: 'Prepare DB env vars'
          command: |
            echo 'export DB_URL="postgresql://$PGUSER@$PGHOST/$PGDB"' >> $BASH_ENV
      # Wait for Postgres connection to open.
      - run: dockerize -wait tcp://$PGHOST:$PGPORT -timeout 1m
      - run:
          name: 'Migrate DB'
          command: npm run up -w apps/dev-migrations
      - run:
          name: 'Run tests in parallel'
          command: |
            TESTFILES=$(circleci tests glob "{apps,packages}/*" | circleci tests split)
            echo "test files:"
            echo $TESTFILES
            npm run test --if-present -w $TESTFILES
#      - run: npm run test -ws --if-present
      - run: echo "tests pass"
      - fail_fast

  lint:
    executor: node-executor
    steps:
      - attach_workspace_default
      - run: npm run lint
      - fail_fast

  release_server:
    executor: node-executor
    steps:
      - attach_workspace_default
      - run:
          name: 'Update package.json, package-lock.json'
          command: bash ci/test-before.sh
      - run:
          name: 'Create release folder'
          command: bash ci/build-server.sh
      - store_artifacts:
          path: release
          destination: release
      - persist_to_workspace:
          root: .
          paths:
            - release
      - fail_fast

  deploy_server:
    executor: python-executor
    working_directory: ./release
    steps:
      - attach_workspace_default
      - aws-s3/copy:
          arguments: '--dryrun'
          from: release/dev-ui.zip
          to: 's3://my-s3-bucket-stage'

  deploy_server_prod:
    executor: python-executor
    steps:
      - attach_workspace_default
      - aws-s3/copy:
          arguments: '--dryrun'
          from: release/dev-ui.zip
          to: 's3://my-s3-bucket-stage'

workflows:
  version: 2
  default_workflow:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      - build:
          requires:
            - setup
      - test:
          requires:
            - build
      - release_server:
          filters:
            branches:
              only:
                - master
                - production
          requires:
            - lint
            - build
            - test
      - deploy_server:
          filters:
            branches:
              only:
                - master
          requires:
            - release_server
      - deploy_server_prod:
          filters:
            branches:
              only:
                - production
          requires:
            - release_server
